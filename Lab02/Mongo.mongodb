// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('mongodbVSCodePlaygroundDB');

// The drop() command destroys all data from a collection.
// Make sure you run it against the correct database and collection.
db.sales.drop();

// Insert a few documents into the sales collection.
db.sales.insertMany([
  { '_id': 1, 'item': 'abc', 'size': {'h': 10, 'w': 20}, 'price': 10, 'quantity': 2, 'date': new Date('2014-03-01T08:00:00Z') },
  { '_id': 2, 'item': 'jkl', 'size': {'h': 23, 'w': 12}, 'price': 20, 'quantity': 1, 'date': new Date('2014-03-01T09:00:00Z') },
  { '_id': 3, 'item': 'xyz', 'size': {'h': 54, 'w': 32}, 'price': 5, 'quantity': 10, 'date': new Date('2014-03-15T09:00:00Z') },
  { '_id': 4, 'item': 'xyz', 'size': {'h': 12, 'w': 20}, 'price': 5, 'quantity':  20, 'date': new Date('2014-04-04T11:21:39.736Z') },
  { '_id': 5, 'item': 'abc', 'size': {'h': 43, 'w': 63}, 'price': 10, 'quantity': 10, 'date': new Date('2014-04-04T21:23:13.331Z') },
  { '_id': 6, 'item': 'def', 'size': {'h': 23, 'w': 20}, 'price': 7.5, 'quantity': 5, 'date': new Date('2015-06-04T05:08:13Z') },
  { '_id': 7, 'item': 'def', 'size': {'h': 15, 'w': 22}, 'price': 7.5, 'quantity': 10, 'date': new Date('2015-09-10T08:43:00Z') },
  { '_id': 8, 'item': 'abc', 'size': {'h': 5, 'w': 23}, 'price': 10, 'quantity': 5, 'date': new Date('2016-02-06T20:20:13Z') },
]);


use('mongodbVSCodePlaygroundDB');
// Run a find command to view items sold on April 4th, 2014.
db.sales.find({ date: { $gte: new Date('2014-04-04'), $lt: new Date('2014-04-05') } });

// Build an aggregation to view total sales for each product in 2014.
const aggregation = [
  { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
  { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
];

// Run the aggregation and open a cursor to the results.
// Use toArray() to exhaust the cursor to return the whole result set.
// You can use hasNext()/next() to iterate through the cursor page by page.
db.sales.aggregate(aggregation);

use('mongodbVSCodePlaygroundDB');
// Increase the price of all products by 10%.
db.sales.updateMany({}, { $mul: { price: 1.1 } });
db.sales.find();

use('mongodbVSCodePlaygroundDB');
// set the price of all products whose price is lower than 10 to 8 and price over 10 to 15
db.sales.updateMany({ price: { $lt: 10 } }, { $set: { price: 8 } });
db.sales.updateMany({ price: { $gte: 10 } }, { $set: { price: 15 } });
db.sales.find();

// Run a find command to view items sold on April 4th, 2014.
db.sales.find({ date: { $gte: new Date('2014-04-04'), $lt: new Date('2014-04-05') } });

// find items with id 1
db.sales.find({ _id: 1 });

// find all, sort by name reverse
db.sales.find().sort({ item: -1 }).limit(2);

use('mongodbVSCodePlaygroundDB');
db.sales.find({price: 7.5},{_id: 1, item: 1, price: 1, quantity: 1});

use('mongodbVSCodePlaygroundDB');
// find the 2 lowest price items
db.sales.find().sort({ price: 1 }).limit(2);

use('mongodbVSCodePlaygroundDB');
// find items whose height is greater than 20
db.sales.find({ 'size.h': { $gt: 20 } });

use('mongodbVSCodePlaygroundDB');
// create index for item
db.sales.createIndex({ item: "name" });
use('mongodbVSCodePlaygroundDB');
db.sales.find();

// Create a database name University
// Insert 5 rows into the table Courses(courseName,credit,teacher,teachingHours)
// find courses which teacher is 'tungdt'
// sort Courses by column teacher('ascending')
// find Courses having greatest teachingHour 
// find Courses having teachingHour less than 10 or greater than 30
// update Courses: change all credit from 3 to 4
// Remove courses which teacher is tungdt
// Search course where course name start with 'Learning'

